[UnnecessaryElif]
markup = 'markdown'
content = '''
Looks like you have an unnecessary Elif condition.
It might be better in this case to just use an Else.

---

For example, instead of:
```python
if x < 5:
    # do something
elif x >= 5:
    # do something else
```
Consider doing this:
```python
if x < 5:
    # do something
else:
    # do something else
```

---

Or, instead of:
```python
if current is None:
    current = Node()
elif current is not None:
    current = current.next
```
Consider doing this:
```python
if current is None:
    current = Node()
else:
    current = current.next
```
'''

[IfElseReturnBool]
markup = 'markdown'
content = '''
Looks like you are returning two booleans inside of an If/Else statement.
It might be better if you just return the If condition or its inverse.

---

For example, instead of:
```python
if x < 5:
    return True
else:
    return False
```
Consider doing this:
```python
return x < 5
```

---

Or, instead of:
```python
if x % 2 == 0:
    return False
else:
    return True
```
Consider doing this:
```python
return x % 2 == 1
```
'''

[IfReturnBool]
markup = 'markdown'
content = '''
Looks like you are returning the result of some conditional check with
boolean literals.
It might be better in this case to just return the condition itself.

---

For example, instead of:
```python
if x < 5:
    return True
return False
```
Consider doing this:
```python
return x < 5
```

---

Or, instead of:
```python
if x % 2 == 0:
    return False
return True
```
Consider doing:
```python
return x % 2 == 1
'''

[IfElseAssignReturn]
markup = 'markdown'
content = '''
Looks like you are returning one of two or more values based on a condition
after assigning the return result to a variable.
It might be better in this case to just return the values inside the
if-statement blocks.

---

For example, instead of:

```python
def get_status(code):
    if code == 200:
        result = "OK"
    else:
        result = "ERR"
    return result
```

Consider doing this:

```python
def get_status(code):
    if code == 200:
        return "OK"
    else:
        return "ERR"
```
'''

[IfElseAssignBoolReturn]
markup = 'markdown'
content = '''
Looks like you are returning the result of some conditional check by assigning a
boolean return value to a variable.
It might be better in this case to just return the condition itself.

---

For example, instead of:
```python
def is_small(x):
    if x < 5:
        value_is_small = True
    else:
        value_is_small = False
    return value_is_small
```

Consider doing this:

```python
def is_small(x):
    return x < 5
```

---

Or, instead of:

```python
def is_valid(value):
    if value is None:
        valid = False
    else:
        valid = True
    return valid
```

Consider doing this:

```python
def is_valid(value):
    return value is not None
```
'''

[IfElseAssignBool]
markup = 'markdown'
content = '''
It looks like you are trying to assign the result of a condition to a variable
in an if/else.
In this case, it might just be best to assign the result of the condition or
its inverse to the variable directly.

---

For example, instead of:

```python
if x > 10:
    is_big = True
else:
    is_big = False
```

Consider doing this:

```python
is_big = x > 10
```

---

Or, instead of:

```python
if len(my_list) > 0:
    is_empty = False
else:
    is_empty = True
```

Consider doing this:

```python
is_empty = len(my_list) == 0
```
'''

[EmptyIfBody]
markup = 'markdown'
content = '''
Looks like the body of this if statement isn't doing anything.
Consider removing it.

---

For example, instead of:

```python
if x > 0:
    x = x
else:
    x = 0
```

Consider doing this:

```python
if x < 0:
    x = 0
```

---

Or, instead of:

```python
if x > 10:
    pass
else:
    x = 10
```

Consider doing this:

```python
if x <= 10:
    x = 10
```
'''

[EmptyElseBody]
markup = 'markdown'
content = '''
Looks like the body of this else statement isn't doing anything.
Consider removing it.

---

For example, instead of:

```python
if x < 0:
    x = 0
else:
    x = x
```

Consider doing this:

```python
if x < 0:
    x = 0
```

---

Or, instead of:

```python
if x <= 10:
    x = 10
else:
    pass
```

Consider doing this:

```python
if x <= 10:
    x = 10
```
'''

[NestedIf]
markup = 'markdown'
content = '''
Looks like you are trying to test a complex condition by nesting two `if`
-statements inside one another. In this case, it might be better to just use
the `and` operator to combine the conditions into one `if`-statement.

---

For example, instead of:

```python
if x > 0:
    if y > 0:
        print('Point is valid')
```

Consider doing this:

```python
if x > 0 and y > 0:
    print('Point is valid')
```

---

Or, instead of this:

```python
if not command.isspace():
    if command.upper() == 'W':
        jump()
```

Consider doing this:

```python
if not command.isspace() and command.upper() == 'W':
    jump()
```

If your conditions are long, you can always surround them with brackets and put
them on multiple lines:

```python
if (not command.isspace()
        and command.upper() == 'W'):
    jump()
```

Or, you can extract the individual conditions or parts of conditions into
variables:

```python
is_valid = not command.isspace()
command = command.upper()
if is_valid and command == 'W':
    jump()
```
'''  # ToDo - Come up with better examples

[ConfusingElse]
markup = 'markdown'
content = '''
It looks like you are nesting an if/else statement inside of an else block.
This can make your code confusing to understand and can be simplified by using
and if/elif/else statement.

---

For example, instead of:
```python
if age < 7:
    ticket_pice = 0
else:
    if age < 50:
        ticket_price = 24
    else:
        ticket_price = 12
```

Consider doing:
if age < 7:
    ticket_pice = 0
elif age < 50:
    ticket_price = 24
else:
    ticket_price = 12
'''

[UnnecessaryElse]
markup = 'markdown'
content = '''
It looks like the code at the end of this if block is the same as the entire
else block!
This means in either case, the same code will be run regardless of whether the
if-condition is True or False.
In this case, it might be better to remove this duplicate code by moving it
outside of the if and else block.

---

For example, instead of:
```python
if x < 5:
    x = 5
    do_something(x)
    print('Done!')
else:
    do_something(x)
    print('Done!')
```

Consider doing this:
```python
if x < 5:
    x = 5
do_something(x)
print("Done!")
```

Here, the duplicate lines `do_something(x)` and `print("Done!")` were moved
outside the if and else block.
'''

[DuplicateIfElseStatement]
markup = 'markdown'
content = '''
It looks like the code at the end of this if block is the same as the end of
the else block!
This means in either case, the same code at the end of each block will be run
regardless of whether the if-condition is True or False.
In this case, it might be better to remove this duplicate code by moving it
outside of the if and else block.

---

For example, instead of:
```python
if x < 5:
    x = 5
    do_something(x)
else:
    x -= 1
    do_something(x)
```

Consider doing this:
```python
if x < 5:
    x = 5
else:
    x -= 1
do_something(x)
```

Here, the duplicate line `do_something(x)` was moved outside the if and
else block.
'''

[SeveralDuplicateIfElseStatements]
markup = 'markdown'
content = '''
It looks like the code at the end of this if block is the same as the end of
the else block!
This means in either case, the same code at the end of each block will be run
regardless of whether the if-condition is True or False.
In this case, it might be better to remove this duplicate code by moving it
outside of the if and else block.

---

For example, instead of:
```python
if x < 5:
    x = 5
    do_something(x)
    print("Done!")
else:
    x -= 1
    do_something(x)
    print("Done!")
```

Consider doing this:
```python
if x < 5:
    x = 5
else:
    x -= 1
do_something(x)
print("Done!")
```

Here, the duplicate lines `do_something(x)` and `print("Done!")` were moved
outside the if and else block.
'''

[DuplicateIfElseBody]
markup = 'markdown'
content = '''
It looks like the body of this if and else block are exactly the same!
This means the if-condition has no effect on what code actually gets run.
Consider removing the if-statement altogether.

---

For example, instead of:
```python
if x < 5:
    do_something(x)
else:
    do_something(x)
```

Consider doing:
```python
do_something(x)
```

The if-else can be removed completely!
'''

[AugmentableAssignment]
markup = 'markdown'
content = '''
It looks like you are writting an assignment to a varaible that could be written
as an _augmented assignment_.

---

For example, instead of:

```python
x = x + 1
```

Consider using:

```python
x += 1
```

---

Or, Instead of:

```python
value = value // 3
```

Consider using:

```python
value //= 3
```
'''

[DuplicateExpression]
markup = 'markdown'
content = '''
_Deprecated Feature_

It seems like some of these code snippets are copied and pasted.
It might be helpful to refactor these into a function that can be reused instead
'''

[MissedAbsoluteValue]
markup = 'markdown'
content = '''
It looks like you're making two comparisons that could be simplified by using the
`abs` (absolute value) function.

---

For example, instead of doing:
```python
# Outside the range -5 to 5
if x < -5 or x > 5:
    ...
```
Consider doing:
```python
if abs(x) > 5:
    ...
```

---

Or, instead of this:
```python
# inside the range -5 to 5
if x >= -5 and x <= 5:
    ...
```
Consider doing:
```python
if abs(x) <= 5:
    ...
```
'''

[RepeatedAddition]
markup = 'markdown'
content = '''
It looks like you are repeating the same addition unnecessarily.
In this case, it might just be easier to use multiplication.

---

For example, instead of:
```python
y = x + x + x
```

Consider doing:
```python
y = 3 * x
```

---

Or, instead of:
```python
y = x + x
```

Consider doing:
```python
y = 2 * x
```
'''

[RepeatedMultiplication]
markup = 'markdown'
content = '''
It looks like you are repeating the same addition unnecessarily.
In this case, it might just be easier to use the power operator (`**`).

---

For example, instead of:
```python
y = x * x * x
```

Consider doing:
```python
y = x ** 3
```

---

Or, instead of:
```python
y = x * x
```

Consider doing:
```python
y = x ** 2
```
'''

[RedundantArithmetic]
markup = 'markdown'
content = '''
It looks like this equation can be simplified.
Adding 0, multiplying or dividing by 1, or a unary add (e.g. `+x`) do nothing
and can just complicate your equations. So, it might be best to remove them.

---

For example, instead of:
```python
x = y + 0
```

Consider doing:
```python
x = y
```

---

Or, instead of:
```python
x = y / 1
```

Consider doing:
```python
x = y
```

---

Or, instead of:
```python
x = +y
```

Consider doing:
```python
x = y
```
'''

[RedundantNot]
markup = 'markdown'
content = '''
It seems like this code is trying to negate (`not`) a comparison.
This just adds extra complexity and can make the code confusing to read.
Consider removing the not and inverting the comparison instead.

---

For example, instead of:
```python
if not (x < 5):
    ...
```
Consider doing:
```python
if x >= 5:
    ...
```

---

Or, instead of:
```python
if not (x == 5):
    ...
```
Consider doing:
```python
if x != 5:
    ...
```
'''

[ElseIf]
markup = 'markdown'
content = '''
Looks like this else stement only contains an if statemeent.
This can be simplified by instead using and elif statement.

---

For example, instead of:
```python
if 0 <= x < 5:
    do_something(x)
else :
    if 5 <= x < 10:
        do_something_else(x)
```
Consider doing:
```python
if 0 <= x < 5:
    do_something(x):
elif 5 <= x < 10:
    do_something_else(x)
'''

[RedundantComparison]
markup = 'markdown'
content = '''
It seems like you are comparing the result of some Boolean condition with a
`True` or `False` literal value.
This is generally redundant in Python and can usually be removed.

---

For example, instead of:

```python
if word.isalpha() == True:
    ...
```

Consider doing:

```python
if word.isalpha():
    ...
```

---
    
Or, instead of doing:

```python
if word.isspace() == False:
    ...
```

Consider doing:

```python
if not word.isspace():
    ...
```
'''

[MergeableEqual]
markup = 'markdown'
content = '''
Looks like you're checking to see if a variable could be one of several values.
This can be simplified using the `in` operator over a tuple of those values.

---

For example, instead of:
```python
if char == "w" or char == "a" or char == "s" or char == "d":
    ...
```
Consider doing:
```python
if char in ("w", "a", "s", "d"):
    ...
```

**Note:** This is not the same as writing `if char in "wasd": ...`.
The `in` operator works slightly differently on strings than on tuples.
In that case, char couuld be equal to "wa", or "asd" etc and still match because
the string `in` operator matches substrings.
'''

[RedundantFor]
markup = 'markdown'
content = '''
Seems like this for loop is only running 0 or 1 times.
It might be best to just remove the for loop.

---

For example, instead of:
```python
for i in range(1):
    do_something(i)
```
Consider doing:
```python
do_something(1)
```
'''
